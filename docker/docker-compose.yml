services:
  prometheus:
    image: bitnami/prometheus:2.50.1
    container_name: prometheus
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
      - ./prometheus/prometheus-persistence:/opt/bitnami/prometheus/data
    # networks:
    #   - prometheus_network
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/grafana-storage:/var/lib/grafana

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
          ES_JAVA_OPTS: "-Xms1000m -Xmx1000m"
          discovery.type: "single-node"
          ELASTIC_PASSWORD: "changeme"
          xpack.security.enabled: "false"
          xpack.security.enrollment.enabled: "false" # Desactiva el modo de inscripci√≥n p
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data


  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.2
    container_name: logstash
    ports:
      - 5000:5000
    volumes:
      # - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/logs:/usr/share/logstash/logs
      - ./logstash/sincedb:/usr/share/logstash/data/sincedb 
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    # environment:
    #   ELASTICSEARCH_USERNAME: "elastic"
    #   ELASTICSEARCH_PASSWORD: "changeme"
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    # volumes:
    #   - ./kibana/data:/usr/share/kibana/config

  redis_mcc_database:
    image: alejandropalmier/redis_mcc_database:v1
    container_name: redis_mcc_database
    ports:
      - "6379:6379" 

  postgresql_keycloak:
    image: postgres:16.2
    container_name: postgresql_keycloak
    volumes: 
      - ./postgresql:/var/lib/postgresql/data

    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB:       keycloak
      POSTGRES_USER:     keycloak
      POSTGRES_PASSWORD: keycloak


  keycloak:
    image: bitnami/keycloak:23.0.7
    container_name: keycloak
    restart: always
    ports:
      - 8080:8080
    environment:
      KEYCLOAK_ADMIN_USER: Alex
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_DATABASE_HOST: postgresql_keycloak
      KEYCLOAK_DATABASE_PORT: 5432
      KEYCLOAK_DATABASE_NAME: keycloak
      KEYCLOAK_DATABASE_USER: keycloak
      KEYCLOAK_DATABASE_PASSWORD: keycloak
      KEYCLOAK_EXTRA_ARGS: --import-realm
    volumes:
      - ./keycloak/realms:/opt/bitnami/keycloak/data/import


  kong-database:
    image: postgres:16.2
    container_name: kong-database
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5433:5432"
    volumes:
      - ./kongdb:/var/lib/postgresql/data
    restart: unless-stopped

  kong:
    image: alejandropalmier/kong:1.0
    container_name: kong
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
      KONG_PLUGINS: bundled,oidc 
    ports:
      - "8100:8000"
      - "8443:8443"
      - "8101:8001"
      - "8444:8444"
    restart: unless-stopped
      
    # networks:
    #   - prometheus_network
# networks:
#   prometheus_network:
#     driver: bridge

