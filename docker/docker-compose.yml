# Los puertos expuestos solo deben ser las UI propias del administrador y a ser posible, exponerlo a través de Kong. El admin debe poder acceder a grafana, kibana, keycloak, konga y la web (a través de kong)
#Comentar/Descomentar puertos. para generar los Services de K8 se necesita que todos tengan puertos que exponer.
services:
  prometheus:
    image: bitnami/prometheus:2.50.1
    container_name: prometheus
    ports:
      - 9090:9090
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
      - ./prometheus/prometheus-persistence:/opt/bitnami/prometheus/data
    # networks:
    #   - prometheus_network
  grafana:
    # image: grafana/grafana:10.3.3
    image: alejandropalmier/grafana:1.0
    container_name: grafana
    ports:
      - 3000:3000
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    # volumes:
    #   - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    #   - ./grafana/grafana-storage:/var/lib/grafana

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
          ES_JAVA_OPTS: "-Xms1000m -Xmx1000m"
          discovery.type: "single-node"
          ELASTIC_PASSWORD: "changeme"
          xpack.security.enabled: "false"
          xpack.security.enrollment.enabled: "false" # Desactiva el modo de inscripción p
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data


  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.2
    container_name: logstash
    ports:
      - 5000:5000
    volumes:
      # - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/logs:/usr/share/logstash/logs
      - ./logstash/sincedb:/usr/share/logstash/data/sincedb 
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    # environment:
    #   ELASTICSEARCH_USERNAME: "elastic"
    #   ELASTICSEARCH_PASSWORD: "changeme"
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    # volumes:
    #   - ./kibana/data:/usr/share/kibana/config

  redis:
    image: docker.io/alejandropalmier/redis-mcc-db:1.0
    # image: redis:latest
    container_name: redis
    # command: ["redis-server", "--bind", "0.0.0.0"]
    # command: ["redis", "--bind", "0.0.0.0", "--port", "6379"]
    ports:
      - "6379:6379" 

  postgresql-keycloak:
    # image: postgres:16.2
    image: alejandropalmier/keycloak-database:2.0
    container_name: postgresql-keycloak
    restart: always
    # volumes: 
    #   - ./postgresql:/var/lib/postgresql/data

    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB:       keycloak
      POSTGRES_USER:     keycloak
      POSTGRES_PASSWORD: keycloak


  keycloak:
    image: bitnami/keycloak:23.0.7
    container_name: keycloak
    restart: always
    ports:
      - 9080:8080
    environment:
      KEYCLOAK_ADMIN_USER: Alex
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_DATABASE_HOST: postgresql-keycloak
      KEYCLOAK_DATABASE_PORT: 5432
      KEYCLOAK_DATABASE_NAME: keycloak
      KEYCLOAK_DATABASE_USER: keycloak
      KEYCLOAK_DATABASE_PASSWORD: keycloak
      # KEYCLOAK_HOSTNAME: "keycloak"
    volumes:
      - ./keycloak/realms:/opt/bitnami/keycloak/data/import


  kong-database:
    # image: postgres:16.2
    image: alejandropalmier/kong-database:2.0
    container_name: kong-database
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5433:5432"
    # volumes:
    #   - ./kongdb:/var/lib/postgresql/data
    restart: always

# # Solo hay que ejecutarlo una vez!!
#   kong-migrations:
#     image: kong:latest
#     container_name: kong-migrations
#     command: "kong migrations bootstrap"
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_HOST: kong-database
#       KONG_PG_DATABASE: kong
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: kong
#     depends_on:
#       - kong-database

  kong:
    image: docker.io/alejandropalmier/kong:1.0
    # image: kong:latest
    container_name: kong
    depends_on:
      - kong-database
      # - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
      KONG_PLUGINS: bundled,keycloak-introspection
      # KONG_PLUGINS: bundled,keycloak-introspection
    ports:
      - "8100:8000"
      - "8443:8443"
      - "8101:8001"
      - "8444:8444"
    restart: always


  konga-database:
    # image: postgres:11.0
    image: alejandropalmier/konga-database:2.0
    container_name: konga-database
    # volumes:
    #   - ./kongadb:/var/lib/postgresql/data
    ports:
      - "5434:5432"  
    environment:
      POSTGRES_DB:       konga
      POSTGRES_USER:     konga
      POSTGRES_PASSWORD: konga
    restart: always

  konga:
    image: pantsel/konga:0.14.9
    container_name: konga
    restart: always
    environment:
      DB_ADAPTER: postgres
      DB_HOST: konga-database
      DB_PORT: 5432
      DB_USER: konga
      DB_PASSWORD: konga
      DB_DATABASE: konga
      NODE_ENV: production
    ports:
      - "1337:1337"
    depends_on:
      - konga-database


  mongodb:
    image: docker.io/alejandropalmier/mongodb-telecomclients:2.0
    # image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    restart: always
    volumes:
      - ./mongo/mongo-data:/data/db
      

  provision:
    # image: docker.io/alejandropalmier/provision:4.0
    image: docker.io/alejandropalmier/provision:latest
    container_name: provision
    ports:
      - "8082:8082" 
    restart: always
    depends_on:
      - mongodb 

    volumes:
      - ./logstash/logs/application.log:/app/logs/application.log


  simswap:
    image: docker.io/alejandropalmier/simswap:latest
    container_name: simswap
    ports:
      - "8083:8083" 
    restart: always
    depends_on:
      - mongodb 

    volumes:
      - ./logstash/logs/application.log:/app/logs/application.log

  devicestatus:
    image: docker.io/alejandropalmier/devicestatus:latest
    container_name: devicestatus
    ports:
      - "8084:8084" 
    restart: always
    depends_on:
      - mongodb 

    volumes:
      - ./logstash/logs/application.log:/app/logs/application.log


  kyc:
    image: docker.io/alejandropalmier/kyc:latest
    container_name: kyc
    ports:
      - "8085:8085" 
    restart: always
    depends_on:
      - mongodb 

    volumes:
      - ./logstash/logs/application.log:/app/logs/application.log
  web:
    # image: nginx:1.25.4-alpine
    image: alejandropalmier/web-portal:1.0
    container_name: web
    # volumes:
    #   - ./web/static:/usr/share/nginx/html  
    ports:
      - "80:80"
    restart: always


    # networks:
    #   - prometheus_network
# networks:
#   prometheus_network:
#     driver: bridge

